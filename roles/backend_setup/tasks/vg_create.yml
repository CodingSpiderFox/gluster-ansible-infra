---
# We have to set the dataalignment for physical volumes, and physicalextentsize
# for volume groups. For JBODs we use a constant alignment value of 256K
# however, for RAID we calculate it by multiplying the RAID stripe unit size
# with the number of data disks. Hence in case of RAID stripe_unit_size and data
# disks are mandatory parameters.

- name: Check if valid disktype is provided
  fail:
    msg: "Unknown disktype. Allowed disktypes: JBOD, RAID6, RAID10, RAID5."
  when: gluster_infra_disktype not in [ 'JBOD', 'RAID6', 'RAID10', 'RAID5' ]


# Set data alignment for JBODs, by default it is 256K. This set_fact is not
# needed if we can always assume 256K for JBOD, however we provide this extra
# variable to override it.
- name: Set PV data alignment for JBOD
  set_fact:
    pv_dataalign: "{{ gluster_infra_dalign | default('256K') }}"
  when: gluster_infra_disktype == 'JBOD'

# Set data alignment for RAID
# We need KiB: ensure to keep the trailing `K' in the pv_dataalign calculation.
- name: Set PV data alignment for RAID
  set_fact:
    pv_dataalign: >
        {{ gluster_infra_diskcount|int *
           gluster_infra_stripe_unit_size|int }}K
  when: >
      gluster_infra_disktype == 'RAID6' or
      gluster_infra_disktype == 'RAID10' or
      gluster_infra_disktype == 'RAID5'

- name: Set VG physical extent size for RAID
  set_fact:
    vg_pesize: >
         {{ gluster_infra_diskcount|int *
            gluster_infra_stripe_unit_size|int }}K
  when: >
     gluster_infra_disktype == 'RAID6' or
     gluster_infra_disktype == 'RAID10' or
     gluster_infra_disktype == 'RAID5'

- name: Check if vg block device exists
  shell: test -b {{ item.pvname }} && echo "1" || echo  "0"
  register: vg_device_exists
  with_items: "{{ gluster_infra_volume_groups }}"
  when: item.pvname is defined
  
- name: Record for missing devices for phase 2
  set_fact:
   gluster_phase2_has_missing_devices: true
  loop: "{{ vg_device_exists.results }}"
  when: item.stdout is defined and item.stdout == "0"


# - debug:
#    var: vg_device_exists

# Tasks to create a volume group
# The devices in `pvs' can be a regular device or a VDO device
- name: Create volume groups
  lvg:
    state: present
    vg: "{{ item.vgname }}"
    pvs: "{{ item.pvname }}"
    pv_options: "--dataalignment {{ pv_dataalign }}"
    # pesize is 4m by default for JBODs
    pesize: "{{ vg_pesize | default(4) }}"  
  with_items: "{{ gluster_infra_volume_groups }}"
  loop_control:
   index_var: index
  when: item.pvname is defined and vg_device_exists.results[index].stdout is defined and vg_device_exists.results[index].stdout == "1"

